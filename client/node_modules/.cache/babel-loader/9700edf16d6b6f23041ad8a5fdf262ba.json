{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable(); // Acccounts now exposed\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"sources":["/Users/petartodorov/Desktop/coding/solidity/Dapp30/Stringman/client/src/utils.js"],"sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MAAM;EACpB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC;IACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;MAC1C;MACA,IAAID,MAAM,CAACE,QAAX,EAAqB;QACnB,MAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;QACA,IAAI;UACF;UACA,MAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;UACAN,OAAO,CAACK,IAAD,CAAP;QACD,CALD,CAKE,OAAOE,KAAP,EAAc;UACdN,MAAM,CAACM,KAAD,CAAN;QACD;MACF,CAVD,CAWA;MAXA,KAYK,IAAIL,MAAM,CAACG,IAAX,EAAiB;QACpB;QACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;QACAG,OAAO,CAACC,GAAR,CAAY,yBAAZ;QACAT,OAAO,CAACK,IAAD,CAAP;MACD,CALI,CAML;MANK,KAOA;QACH,MAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;QAGA,MAAMP,IAAI,GAAG,IAAIR,IAAJ,CAASa,QAAT,CAAb;QACAF,OAAO,CAACC,GAAR,CAAY,8CAAZ;QACAT,OAAO,CAACK,IAAD,CAAP;MACD;IACF,CA7BD;EA8BD,CAhCM,CAAP;AAiCD,CAlCD;;AAoCA,SAASP,OAAT"},"metadata":{},"sourceType":"module"}